import { useContext, useEffect, useRef, useState } from 'react';
import { GoogleApiContext } from './GoogleApiContext';
export function useGoogleApi({ discoveryDocs = [], scopes = [], modules = [] } = {}) {
    var _a, _b;
    const { gapi, configure } = (_a = useContext(GoogleApiContext)) !== null && _a !== void 0 ? _a : {};
    const [configureState, setConfigureState] = useState();
    const mounted = useRef();
    useEffect(() => {
        mounted.current = true;
        return () => { mounted.current = false; };
    });
    const [, rerender] = useState();
    const auth = (_b = gapi === null || gapi === void 0 ? void 0 : gapi.auth2) === null || _b === void 0 ? void 0 : _b.getAuthInstance();
    useEffect(() => {
        if (auth) {
            auth.isSignedIn.listen(() => mounted.current && rerender({}));
            auth.currentUser.listen(() => mounted.current && rerender({}));
        }
    }, [auth]);
    return configure ? configure({ discoveryDocs, scopes, modules }, newState => mounted.current && newState !== configureState && setConfigureState(newState)) : undefined;
}
